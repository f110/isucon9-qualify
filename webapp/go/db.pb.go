// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: db.proto

package main

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserCache struct {
	Id             int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountName    string           `protobuf:"bytes,2,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	HashedPassword []byte           `protobuf:"bytes,3,opt,name=hashed_password,json=hashedPassword,proto3" json:"hashed_password,omitempty"`
	Address        string           `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	NumSellItems   int32            `protobuf:"varint,5,opt,name=num_sell_items,json=numSellItems,proto3" json:"num_sell_items,omitempty"`
	LastBump       *types.Timestamp `protobuf:"bytes,6,opt,name=last_bump,json=lastBump,proto3" json:"last_bump,omitempty"`
	CreatedAt      *types.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *UserCache) Reset()         { *m = UserCache{} }
func (m *UserCache) String() string { return proto.CompactTextString(m) }
func (*UserCache) ProtoMessage()    {}
func (*UserCache) Descriptor() ([]byte, []int) {
	return fileDescriptor_8817812184a13374, []int{0}
}
func (m *UserCache) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserCache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserCache.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserCache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCache.Merge(m, src)
}
func (m *UserCache) XXX_Size() int {
	return m.Size()
}
func (m *UserCache) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCache.DiscardUnknown(m)
}

var xxx_messageInfo_UserCache proto.InternalMessageInfo

func (m *UserCache) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserCache) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *UserCache) GetHashedPassword() []byte {
	if m != nil {
		return m.HashedPassword
	}
	return nil
}

func (m *UserCache) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserCache) GetNumSellItems() int32 {
	if m != nil {
		return m.NumSellItems
	}
	return 0
}

func (m *UserCache) GetLastBump() *types.Timestamp {
	if m != nil {
		return m.LastBump
	}
	return nil
}

func (m *UserCache) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type ShippingCache struct {
	TransactionEvidenceId int64            `protobuf:"varint,1,opt,name=transaction_evidence_id,json=transactionEvidenceId,proto3" json:"transaction_evidence_id,omitempty"`
	Status                string           `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	ItemName              string           `protobuf:"bytes,3,opt,name=item_name,json=itemName,proto3" json:"item_name,omitempty"`
	ItemId                int64            `protobuf:"varint,4,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ReserveId             string           `protobuf:"bytes,5,opt,name=reserve_id,json=reserveId,proto3" json:"reserve_id,omitempty"`
	ReserveTime           int64            `protobuf:"varint,6,opt,name=reserve_time,json=reserveTime,proto3" json:"reserve_time,omitempty"`
	ToAddress             string           `protobuf:"bytes,7,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	ToName                string           `protobuf:"bytes,8,opt,name=to_name,json=toName,proto3" json:"to_name,omitempty"`
	FromAddress           string           `protobuf:"bytes,9,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	FromName              string           `protobuf:"bytes,10,opt,name=from_name,json=fromName,proto3" json:"from_name,omitempty"`
	ImgBinary             []byte           `protobuf:"bytes,11,opt,name=img_binary,json=imgBinary,proto3" json:"img_binary,omitempty"`
	CreatedAt             *types.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt             *types.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (m *ShippingCache) Reset()         { *m = ShippingCache{} }
func (m *ShippingCache) String() string { return proto.CompactTextString(m) }
func (*ShippingCache) ProtoMessage()    {}
func (*ShippingCache) Descriptor() ([]byte, []int) {
	return fileDescriptor_8817812184a13374, []int{1}
}
func (m *ShippingCache) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShippingCache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShippingCache.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShippingCache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShippingCache.Merge(m, src)
}
func (m *ShippingCache) XXX_Size() int {
	return m.Size()
}
func (m *ShippingCache) XXX_DiscardUnknown() {
	xxx_messageInfo_ShippingCache.DiscardUnknown(m)
}

var xxx_messageInfo_ShippingCache proto.InternalMessageInfo

func (m *ShippingCache) GetTransactionEvidenceId() int64 {
	if m != nil {
		return m.TransactionEvidenceId
	}
	return 0
}

func (m *ShippingCache) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ShippingCache) GetItemName() string {
	if m != nil {
		return m.ItemName
	}
	return ""
}

func (m *ShippingCache) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *ShippingCache) GetReserveId() string {
	if m != nil {
		return m.ReserveId
	}
	return ""
}

func (m *ShippingCache) GetReserveTime() int64 {
	if m != nil {
		return m.ReserveTime
	}
	return 0
}

func (m *ShippingCache) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *ShippingCache) GetToName() string {
	if m != nil {
		return m.ToName
	}
	return ""
}

func (m *ShippingCache) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *ShippingCache) GetFromName() string {
	if m != nil {
		return m.FromName
	}
	return ""
}

func (m *ShippingCache) GetImgBinary() []byte {
	if m != nil {
		return m.ImgBinary
	}
	return nil
}

func (m *ShippingCache) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ShippingCache) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type ItemCache struct {
	Id          int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SellerId    int64            `protobuf:"varint,2,opt,name=seller_id,json=sellerId,proto3" json:"seller_id,omitempty"`
	BuyerId     int64            `protobuf:"varint,3,opt,name=buyer_id,json=buyerId,proto3" json:"buyer_id,omitempty"`
	Status      string           `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Name        string           `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Price       int32            `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	Description string           `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	ImageName   string           `protobuf:"bytes,8,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	CategoryId  int32            `protobuf:"varint,9,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	CreatedAt   *types.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *types.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (m *ItemCache) Reset()         { *m = ItemCache{} }
func (m *ItemCache) String() string { return proto.CompactTextString(m) }
func (*ItemCache) ProtoMessage()    {}
func (*ItemCache) Descriptor() ([]byte, []int) {
	return fileDescriptor_8817812184a13374, []int{2}
}
func (m *ItemCache) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemCache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemCache.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemCache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemCache.Merge(m, src)
}
func (m *ItemCache) XXX_Size() int {
	return m.Size()
}
func (m *ItemCache) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemCache.DiscardUnknown(m)
}

var xxx_messageInfo_ItemCache proto.InternalMessageInfo

func (m *ItemCache) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ItemCache) GetSellerId() int64 {
	if m != nil {
		return m.SellerId
	}
	return 0
}

func (m *ItemCache) GetBuyerId() int64 {
	if m != nil {
		return m.BuyerId
	}
	return 0
}

func (m *ItemCache) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ItemCache) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ItemCache) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *ItemCache) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ItemCache) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *ItemCache) GetCategoryId() int32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *ItemCache) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ItemCache) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type TransactionEvidenceCache struct {
	Id                 int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SellerId           int64            `protobuf:"varint,2,opt,name=seller_id,json=sellerId,proto3" json:"seller_id,omitempty"`
	BuyerId            int64            `protobuf:"varint,3,opt,name=buyer_id,json=buyerId,proto3" json:"buyer_id,omitempty"`
	Status             string           `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	ItemId             int64            `protobuf:"varint,5,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ItemName           string           `protobuf:"bytes,6,opt,name=item_name,json=itemName,proto3" json:"item_name,omitempty"`
	ItemPrice          int32            `protobuf:"varint,7,opt,name=item_price,json=itemPrice,proto3" json:"item_price,omitempty"`
	ItemDescription    string           `protobuf:"bytes,8,opt,name=item_description,json=itemDescription,proto3" json:"item_description,omitempty"`
	ItemCategoryId     int32            `protobuf:"varint,9,opt,name=item_category_id,json=itemCategoryId,proto3" json:"item_category_id,omitempty"`
	ItemRootCategoryId int32            `protobuf:"varint,10,opt,name=item_root_category_id,json=itemRootCategoryId,proto3" json:"item_root_category_id,omitempty"`
	CreatedAt          *types.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          *types.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (m *TransactionEvidenceCache) Reset()         { *m = TransactionEvidenceCache{} }
func (m *TransactionEvidenceCache) String() string { return proto.CompactTextString(m) }
func (*TransactionEvidenceCache) ProtoMessage()    {}
func (*TransactionEvidenceCache) Descriptor() ([]byte, []int) {
	return fileDescriptor_8817812184a13374, []int{3}
}
func (m *TransactionEvidenceCache) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionEvidenceCache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionEvidenceCache.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionEvidenceCache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionEvidenceCache.Merge(m, src)
}
func (m *TransactionEvidenceCache) XXX_Size() int {
	return m.Size()
}
func (m *TransactionEvidenceCache) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionEvidenceCache.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionEvidenceCache proto.InternalMessageInfo

func (m *TransactionEvidenceCache) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TransactionEvidenceCache) GetSellerId() int64 {
	if m != nil {
		return m.SellerId
	}
	return 0
}

func (m *TransactionEvidenceCache) GetBuyerId() int64 {
	if m != nil {
		return m.BuyerId
	}
	return 0
}

func (m *TransactionEvidenceCache) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TransactionEvidenceCache) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *TransactionEvidenceCache) GetItemName() string {
	if m != nil {
		return m.ItemName
	}
	return ""
}

func (m *TransactionEvidenceCache) GetItemPrice() int32 {
	if m != nil {
		return m.ItemPrice
	}
	return 0
}

func (m *TransactionEvidenceCache) GetItemDescription() string {
	if m != nil {
		return m.ItemDescription
	}
	return ""
}

func (m *TransactionEvidenceCache) GetItemCategoryId() int32 {
	if m != nil {
		return m.ItemCategoryId
	}
	return 0
}

func (m *TransactionEvidenceCache) GetItemRootCategoryId() int32 {
	if m != nil {
		return m.ItemRootCategoryId
	}
	return 0
}

func (m *TransactionEvidenceCache) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *TransactionEvidenceCache) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*UserCache)(nil), "db.UserCache")
	proto.RegisterType((*ShippingCache)(nil), "db.ShippingCache")
	proto.RegisterType((*ItemCache)(nil), "db.ItemCache")
	proto.RegisterType((*TransactionEvidenceCache)(nil), "db.TransactionEvidenceCache")
}

func init() { proto.RegisterFile("db.proto", fileDescriptor_8817812184a13374) }

var fileDescriptor_8817812184a13374 = []byte{
	// 704 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x93, 0xcf, 0x4e, 0xdc, 0x48,
	0x10, 0xc6, 0xf1, 0x78, 0xfe, 0xb9, 0x3c, 0x0c, 0xab, 0xd6, 0xb2, 0x78, 0x41, 0x0c, 0x03, 0x5a,
	0x69, 0x67, 0x2f, 0x83, 0x76, 0x57, 0xda, 0xd5, 0x1e, 0x81, 0xcd, 0x61, 0x2e, 0x11, 0x32, 0xe4,
	0x92, 0x8b, 0xd5, 0xe3, 0x6e, 0x66, 0x5a, 0x1a, 0xbb, 0xad, 0xee, 0x36, 0x11, 0x6f, 0x91, 0x7b,
	0x5e, 0x28, 0x97, 0x48, 0x1c, 0x73, 0x8c, 0x20, 0xd7, 0xbc, 0x43, 0xd4, 0xd5, 0x36, 0x9a, 0x81,
	0x44, 0x08, 0x0e, 0xb9, 0xb9, 0xbf, 0xaa, 0x6a, 0x77, 0x7d, 0xbf, 0x2a, 0xe8, 0xb2, 0xe9, 0xb8,
	0x50, 0xd2, 0x48, 0xd2, 0x60, 0xd3, 0xed, 0xbd, 0x99, 0x94, 0xb3, 0x05, 0x3f, 0x44, 0x65, 0x5a,
	0x5e, 0x1c, 0x1a, 0x91, 0x71, 0x6d, 0x68, 0x56, 0xb8, 0xa4, 0x83, 0x77, 0x0d, 0x08, 0x5e, 0x69,
	0xae, 0x4e, 0x68, 0x3a, 0xe7, 0xa4, 0x0f, 0x0d, 0xc1, 0x22, 0x6f, 0xe8, 0x8d, 0xfc, 0xb8, 0x21,
	0x18, 0xd9, 0x87, 0x1e, 0x4d, 0x53, 0x59, 0xe6, 0x26, 0xc9, 0x69, 0xc6, 0xa3, 0xc6, 0xd0, 0x1b,
	0x05, 0x71, 0x58, 0x69, 0x2f, 0x69, 0xc6, 0xc9, 0xef, 0xb0, 0x31, 0xa7, 0x7a, 0xce, 0x59, 0x52,
	0x50, 0xad, 0xdf, 0x48, 0xc5, 0x22, 0x7f, 0xe8, 0x8d, 0x7a, 0x71, 0xdf, 0xc9, 0xa7, 0x95, 0x4a,
	0x22, 0xe8, 0x50, 0xc6, 0x14, 0xd7, 0x3a, 0x6a, 0xe2, 0x35, 0xf5, 0x91, 0xfc, 0x06, 0xfd, 0xbc,
	0xcc, 0x12, 0xcd, 0x17, 0x8b, 0x44, 0x18, 0x9e, 0xe9, 0xa8, 0x35, 0xf4, 0x46, 0xad, 0xb8, 0x97,
	0x97, 0xd9, 0x19, 0x5f, 0x2c, 0x26, 0x56, 0x23, 0xff, 0x42, 0xb0, 0xa0, 0xda, 0x24, 0xd3, 0x32,
	0x2b, 0xa2, 0xf6, 0xd0, 0x1b, 0x85, 0x7f, 0x6d, 0x8f, 0x5d, 0x7b, 0xe3, 0xba, 0xbd, 0xf1, 0x79,
	0xdd, 0x5e, 0xdc, 0xb5, 0xc9, 0xc7, 0x65, 0x56, 0x90, 0xff, 0x00, 0x52, 0xc5, 0xa9, 0xe1, 0x2c,
	0xa1, 0x26, 0xea, 0x3c, 0x5a, 0x19, 0x54, 0xd9, 0x47, 0xe6, 0xe0, 0xb3, 0x0f, 0xeb, 0x67, 0x73,
	0x51, 0x14, 0x22, 0x9f, 0x39, 0x87, 0xfe, 0x81, 0x2d, 0xa3, 0x68, 0xae, 0x69, 0x6a, 0x84, 0xcc,
	0x13, 0x7e, 0x29, 0x18, 0xcf, 0x53, 0x9e, 0xdc, 0xd9, 0xb6, 0xb9, 0x14, 0x7e, 0x51, 0x45, 0x27,
	0x8c, 0xfc, 0x02, 0x6d, 0x6d, 0xa8, 0x29, 0x75, 0xe5, 0x61, 0x75, 0x22, 0x3b, 0x10, 0xd8, 0x96,
	0x9d, 0xbd, 0x3e, 0x86, 0xba, 0x56, 0x40, 0x6f, 0xb7, 0xa0, 0x83, 0x41, 0xc1, 0xd0, 0x32, 0x3f,
	0x6e, 0xdb, 0xe3, 0x84, 0x91, 0x5d, 0x00, 0xc5, 0x35, 0x57, 0x97, 0xf8, 0xe3, 0x16, 0x96, 0x05,
	0x95, 0x32, 0x41, 0x6c, 0x75, 0xd8, 0xf2, 0x46, 0xb7, 0xfc, 0x38, 0xac, 0x34, 0xdb, 0xa9, 0xbd,
	0xc1, 0xc8, 0xa4, 0x06, 0xd2, 0x71, 0x37, 0x18, 0x79, 0x54, 0x21, 0xd9, 0x82, 0x8e, 0x91, 0xee,
	0x51, 0x5d, 0xf7, 0x5e, 0x23, 0xf1, 0x49, 0xfb, 0xd0, 0xbb, 0x50, 0x32, 0xbb, 0xab, 0x0c, 0xdc,
	0x44, 0x58, 0xad, 0xae, 0xdd, 0x81, 0x00, 0x53, 0xb0, 0x1a, 0x5c, 0x4b, 0x56, 0xc0, 0xfa, 0x5d,
	0x00, 0x91, 0xcd, 0x92, 0xa9, 0xc8, 0xa9, 0xba, 0x8a, 0x42, 0x9c, 0x94, 0x40, 0x64, 0xb3, 0x63,
	0x14, 0xee, 0xb1, 0xea, 0x3d, 0x81, 0x95, 0x2d, 0x2d, 0x0b, 0x56, 0x97, 0xae, 0x3f, 0x5e, 0x5a,
	0x65, 0x1f, 0x99, 0x83, 0x2f, 0x0d, 0x08, 0xec, 0x90, 0x7d, 0x7b, 0x09, 0x76, 0x20, 0xb0, 0xa3,
	0xc9, 0x95, 0xf5, 0xba, 0x81, 0x72, 0xd7, 0x09, 0x13, 0x46, 0x7e, 0x85, 0xee, 0xb4, 0xbc, 0x72,
	0x31, 0x1f, 0x63, 0x1d, 0x3c, 0xaf, 0x20, 0x6f, 0xae, 0x20, 0x27, 0xd0, 0x44, 0x6b, 0x1c, 0x36,
	0xfc, 0x26, 0x3f, 0x43, 0xab, 0x50, 0x22, 0x75, 0xa8, 0x5a, 0xb1, 0x3b, 0x90, 0x21, 0x84, 0x8c,
	0xeb, 0x54, 0x89, 0xc2, 0x4e, 0x53, 0x45, 0x69, 0x59, 0x72, 0x76, 0xd2, 0x19, 0x5f, 0x46, 0x15,
	0xa0, 0x82, 0x6e, 0xef, 0x41, 0x98, 0x52, 0xc3, 0x67, 0x52, 0x5d, 0xd9, 0x07, 0x06, 0x78, 0x39,
	0xd4, 0xd2, 0x84, 0xdd, 0xf3, 0x1b, 0x9e, 0xef, 0x77, 0xf8, 0x14, 0xbf, 0x3f, 0xf8, 0x10, 0x9d,
	0x3f, 0x5c, 0x93, 0x1f, 0x63, 0xff, 0xd2, 0x52, 0xb5, 0x56, 0x96, 0x6a, 0x65, 0x15, 0xdb, 0xf7,
	0x56, 0xd1, 0x1a, 0x6d, 0x83, 0x8e, 0x52, 0x07, 0x8d, 0xc4, 0xf4, 0x53, 0x24, 0xf5, 0x07, 0xfc,
	0x84, 0xe1, 0x65, 0x5c, 0x8e, 0xc6, 0x86, 0xd5, 0xff, 0x5f, 0x42, 0x36, 0xaa, 0x52, 0x1f, 0x82,
	0xe9, 0x0b, 0x9c, 0xc1, 0x3b, 0x38, 0x7f, 0xc2, 0x26, 0x66, 0x2a, 0x29, 0xcd, 0x4a, 0x3a, 0x60,
	0x3a, 0xb1, 0xc1, 0x58, 0x4a, 0x73, 0xf2, 0x3d, 0x9e, 0xe1, 0xf3, 0x79, 0xf6, 0x9e, 0xc0, 0xf3,
	0x78, 0xf0, 0xfe, 0x66, 0xe0, 0x5d, 0xdf, 0x0c, 0xbc, 0x4f, 0x37, 0x03, 0xef, 0xed, 0xed, 0x60,
	0xed, 0xfa, 0x76, 0xb0, 0xf6, 0xf1, 0x76, 0xb0, 0xf6, 0xba, 0x99, 0x51, 0x91, 0x4f, 0xdb, 0x58,
	0xfe, 0xf7, 0xd7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x68, 0x40, 0xfa, 0x87, 0x9c, 0x06, 0x00, 0x00,
}

func (m *UserCache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.LastBump != nil {
		{
			size, err := m.LastBump.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.NumSellItems != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.NumSellItems))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintDb(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.HashedPassword) > 0 {
		i -= len(m.HashedPassword)
		copy(dAtA[i:], m.HashedPassword)
		i = encodeVarintDb(dAtA, i, uint64(len(m.HashedPassword)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccountName) > 0 {
		i -= len(m.AccountName)
		copy(dAtA[i:], m.AccountName)
		i = encodeVarintDb(dAtA, i, uint64(len(m.AccountName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShippingCache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShippingCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShippingCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.ImgBinary) > 0 {
		i -= len(m.ImgBinary)
		copy(dAtA[i:], m.ImgBinary)
		i = encodeVarintDb(dAtA, i, uint64(len(m.ImgBinary)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.FromName) > 0 {
		i -= len(m.FromName)
		copy(dAtA[i:], m.FromName)
		i = encodeVarintDb(dAtA, i, uint64(len(m.FromName)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintDb(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ToName) > 0 {
		i -= len(m.ToName)
		copy(dAtA[i:], m.ToName)
		i = encodeVarintDb(dAtA, i, uint64(len(m.ToName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintDb(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ReserveTime != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.ReserveTime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ReserveId) > 0 {
		i -= len(m.ReserveId)
		copy(dAtA[i:], m.ReserveId)
		i = encodeVarintDb(dAtA, i, uint64(len(m.ReserveId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ItemId != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ItemName) > 0 {
		i -= len(m.ItemName)
		copy(dAtA[i:], m.ItemName)
		i = encodeVarintDb(dAtA, i, uint64(len(m.ItemName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintDb(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if m.TransactionEvidenceId != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.TransactionEvidenceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ItemCache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.CategoryId != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.CategoryId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ImageName) > 0 {
		i -= len(m.ImageName)
		copy(dAtA[i:], m.ImageName)
		i = encodeVarintDb(dAtA, i, uint64(len(m.ImageName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDb(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Price != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintDb(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if m.BuyerId != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.BuyerId))
		i--
		dAtA[i] = 0x18
	}
	if m.SellerId != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.SellerId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionEvidenceCache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionEvidenceCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionEvidenceCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.ItemRootCategoryId != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.ItemRootCategoryId))
		i--
		dAtA[i] = 0x50
	}
	if m.ItemCategoryId != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.ItemCategoryId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ItemDescription) > 0 {
		i -= len(m.ItemDescription)
		copy(dAtA[i:], m.ItemDescription)
		i = encodeVarintDb(dAtA, i, uint64(len(m.ItemDescription)))
		i--
		dAtA[i] = 0x42
	}
	if m.ItemPrice != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.ItemPrice))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ItemName) > 0 {
		i -= len(m.ItemName)
		copy(dAtA[i:], m.ItemName)
		i = encodeVarintDb(dAtA, i, uint64(len(m.ItemName)))
		i--
		dAtA[i] = 0x32
	}
	if m.ItemId != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintDb(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if m.BuyerId != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.BuyerId))
		i--
		dAtA[i] = 0x18
	}
	if m.SellerId != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.SellerId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDb(dAtA []byte, offset int, v uint64) int {
	offset -= sovDb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDb(uint64(m.Id))
	}
	l = len(m.AccountName)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	l = len(m.HashedPassword)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	if m.NumSellItems != 0 {
		n += 1 + sovDb(uint64(m.NumSellItems))
	}
	if m.LastBump != nil {
		l = m.LastBump.Size()
		n += 1 + l + sovDb(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovDb(uint64(l))
	}
	return n
}

func (m *ShippingCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransactionEvidenceId != 0 {
		n += 1 + sovDb(uint64(m.TransactionEvidenceId))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	l = len(m.ItemName)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	if m.ItemId != 0 {
		n += 1 + sovDb(uint64(m.ItemId))
	}
	l = len(m.ReserveId)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	if m.ReserveTime != 0 {
		n += 1 + sovDb(uint64(m.ReserveTime))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	l = len(m.ToName)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	l = len(m.FromName)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	l = len(m.ImgBinary)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovDb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovDb(uint64(l))
	}
	return n
}

func (m *ItemCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDb(uint64(m.Id))
	}
	if m.SellerId != 0 {
		n += 1 + sovDb(uint64(m.SellerId))
	}
	if m.BuyerId != 0 {
		n += 1 + sovDb(uint64(m.BuyerId))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovDb(uint64(m.Price))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	l = len(m.ImageName)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	if m.CategoryId != 0 {
		n += 1 + sovDb(uint64(m.CategoryId))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovDb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovDb(uint64(l))
	}
	return n
}

func (m *TransactionEvidenceCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDb(uint64(m.Id))
	}
	if m.SellerId != 0 {
		n += 1 + sovDb(uint64(m.SellerId))
	}
	if m.BuyerId != 0 {
		n += 1 + sovDb(uint64(m.BuyerId))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	if m.ItemId != 0 {
		n += 1 + sovDb(uint64(m.ItemId))
	}
	l = len(m.ItemName)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	if m.ItemPrice != 0 {
		n += 1 + sovDb(uint64(m.ItemPrice))
	}
	l = len(m.ItemDescription)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	if m.ItemCategoryId != 0 {
		n += 1 + sovDb(uint64(m.ItemCategoryId))
	}
	if m.ItemRootCategoryId != 0 {
		n += 1 + sovDb(uint64(m.ItemRootCategoryId))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovDb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovDb(uint64(l))
	}
	return n
}

func sovDb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDb(x uint64) (n int) {
	return sovDb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserCache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashedPassword", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashedPassword = append(m.HashedPassword[:0], dAtA[iNdEx:postIndex]...)
			if m.HashedPassword == nil {
				m.HashedPassword = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSellItems", wireType)
			}
			m.NumSellItems = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSellItems |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBump", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastBump == nil {
				m.LastBump = &types.Timestamp{}
			}
			if err := m.LastBump.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShippingCache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShippingCache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShippingCache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionEvidenceId", wireType)
			}
			m.TransactionEvidenceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionEvidenceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveTime", wireType)
			}
			m.ReserveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgBinary", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgBinary = append(m.ImgBinary[:0], dAtA[iNdEx:postIndex]...)
			if m.ImgBinary == nil {
				m.ImgBinary = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemCache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemCache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemCache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			m.SellerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			m.BuyerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			m.CategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionEvidenceCache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionEvidenceCache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionEvidenceCache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			m.SellerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			m.BuyerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemPrice", wireType)
			}
			m.ItemPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemPrice |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemCategoryId", wireType)
			}
			m.ItemCategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemCategoryId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemRootCategoryId", wireType)
			}
			m.ItemRootCategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemRootCategoryId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDb = fmt.Errorf("proto: unexpected end of group")
)
