// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: db.proto

package main

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserCache struct {
	Id             int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountName    string           `protobuf:"bytes,2,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	HashedPassword []byte           `protobuf:"bytes,3,opt,name=hashed_password,json=hashedPassword,proto3" json:"hashed_password,omitempty"`
	Address        string           `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	NumSellItems   int32            `protobuf:"varint,5,opt,name=num_sell_items,json=numSellItems,proto3" json:"num_sell_items,omitempty"`
	LastBump       *types.Timestamp `protobuf:"bytes,6,opt,name=last_bump,json=lastBump,proto3" json:"last_bump,omitempty"`
	CreatedAt      *types.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *UserCache) Reset()         { *m = UserCache{} }
func (m *UserCache) String() string { return proto.CompactTextString(m) }
func (*UserCache) ProtoMessage()    {}
func (*UserCache) Descriptor() ([]byte, []int) {
	return fileDescriptor_8817812184a13374, []int{0}
}
func (m *UserCache) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserCache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserCache.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserCache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCache.Merge(m, src)
}
func (m *UserCache) XXX_Size() int {
	return m.Size()
}
func (m *UserCache) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCache.DiscardUnknown(m)
}

var xxx_messageInfo_UserCache proto.InternalMessageInfo

func (m *UserCache) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserCache) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *UserCache) GetHashedPassword() []byte {
	if m != nil {
		return m.HashedPassword
	}
	return nil
}

func (m *UserCache) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserCache) GetNumSellItems() int32 {
	if m != nil {
		return m.NumSellItems
	}
	return 0
}

func (m *UserCache) GetLastBump() *types.Timestamp {
	if m != nil {
		return m.LastBump
	}
	return nil
}

func (m *UserCache) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*UserCache)(nil), "db.UserCache")
}

func init() { proto.RegisterFile("db.proto", fileDescriptor_8817812184a13374) }

var fileDescriptor_8817812184a13374 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8f, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x46, 0xeb, 0xf4, 0x37, 0x6e, 0x55, 0x24, 0x4f, 0x56, 0x07, 0x13, 0x10, 0x12, 0x99, 0x52,
	0x09, 0x06, 0xc4, 0x48, 0x99, 0x58, 0x10, 0x0a, 0xb0, 0xb0, 0x44, 0x37, 0xf1, 0xa5, 0x8d, 0x64,
	0xc7, 0x51, 0x6c, 0x8b, 0xd7, 0x60, 0xe7, 0x85, 0x18, 0x3b, 0x32, 0xa2, 0xf6, 0x45, 0x50, 0x7f,
	0x32, 0x33, 0xde, 0xa3, 0xf3, 0x5d, 0xe9, 0xd0, 0x91, 0xcc, 0x93, 0xba, 0x31, 0xce, 0xb0, 0x40,
	0xe6, 0xb3, 0xd3, 0xa5, 0x31, 0x4b, 0x85, 0xf3, 0x3d, 0xc9, 0xfd, 0xfb, 0xdc, 0x95, 0x1a, 0xad,
	0x03, 0x5d, 0x1f, 0xa4, 0xf3, 0xaf, 0x80, 0x86, 0xaf, 0x16, 0x9b, 0x7b, 0x28, 0x56, 0xc8, 0xa6,
	0x34, 0x28, 0x25, 0x27, 0x11, 0x89, 0xbb, 0x69, 0x50, 0x4a, 0x76, 0x46, 0x27, 0x50, 0x14, 0xc6,
	0x57, 0x2e, 0xab, 0x40, 0x23, 0x0f, 0x22, 0x12, 0x87, 0xe9, 0xf8, 0xc8, 0x1e, 0x41, 0x23, 0xbb,
	0xa4, 0x27, 0x2b, 0xb0, 0x2b, 0x94, 0x59, 0x0d, 0xd6, 0x7e, 0x98, 0x46, 0xf2, 0x6e, 0x44, 0xe2,
	0x49, 0x3a, 0x3d, 0xe0, 0xa7, 0x23, 0x65, 0x9c, 0x0e, 0x41, 0xca, 0x06, 0xad, 0xe5, 0xbd, 0xfd,
	0x9b, 0xf6, 0x64, 0x17, 0x74, 0x5a, 0x79, 0x9d, 0x59, 0x54, 0x2a, 0x2b, 0x1d, 0x6a, 0xcb, 0xfb,
	0x11, 0x89, 0xfb, 0xe9, 0xa4, 0xf2, 0xfa, 0x19, 0x95, 0x7a, 0xd8, 0x31, 0x76, 0x43, 0x43, 0x05,
	0xd6, 0x65, 0xb9, 0xd7, 0x35, 0x1f, 0x44, 0x24, 0x1e, 0x5f, 0xcd, 0x92, 0x43, 0x5e, 0xd2, 0xe6,
	0x25, 0x2f, 0x6d, 0x5e, 0x3a, 0xda, 0xc9, 0x0b, 0xaf, 0x6b, 0x76, 0x4b, 0x69, 0xd1, 0x20, 0x38,
	0x94, 0x19, 0x38, 0x3e, 0xfc, 0x77, 0x19, 0x1e, 0xed, 0x3b, 0xb7, 0x10, 0xdf, 0x1b, 0x41, 0xd6,
	0x1b, 0x41, 0x7e, 0x37, 0x82, 0x7c, 0x6e, 0x45, 0x67, 0xbd, 0x15, 0x9d, 0x9f, 0xad, 0xe8, 0xbc,
	0xf5, 0x34, 0x94, 0x55, 0x3e, 0xd8, 0xcf, 0xaf, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x90,
	0x17, 0xf5, 0x75, 0x01, 0x00, 0x00,
}

func (m *UserCache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.LastBump != nil {
		{
			size, err := m.LastBump.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.NumSellItems != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.NumSellItems))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintDb(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.HashedPassword) > 0 {
		i -= len(m.HashedPassword)
		copy(dAtA[i:], m.HashedPassword)
		i = encodeVarintDb(dAtA, i, uint64(len(m.HashedPassword)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccountName) > 0 {
		i -= len(m.AccountName)
		copy(dAtA[i:], m.AccountName)
		i = encodeVarintDb(dAtA, i, uint64(len(m.AccountName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDb(dAtA []byte, offset int, v uint64) int {
	offset -= sovDb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDb(uint64(m.Id))
	}
	l = len(m.AccountName)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	l = len(m.HashedPassword)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	if m.NumSellItems != 0 {
		n += 1 + sovDb(uint64(m.NumSellItems))
	}
	if m.LastBump != nil {
		l = m.LastBump.Size()
		n += 1 + l + sovDb(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovDb(uint64(l))
	}
	return n
}

func sovDb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDb(x uint64) (n int) {
	return sovDb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserCache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashedPassword", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashedPassword = append(m.HashedPassword[:0], dAtA[iNdEx:postIndex]...)
			if m.HashedPassword == nil {
				m.HashedPassword = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSellItems", wireType)
			}
			m.NumSellItems = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSellItems |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBump", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastBump == nil {
				m.LastBump = &types.Timestamp{}
			}
			if err := m.LastBump.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDb = fmt.Errorf("proto: unexpected end of group")
)
